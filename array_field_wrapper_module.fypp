MODULE ARRAY_FIELD_WRAPPER_MODULE

#:set fieldTypeList = fieldType.getFieldTypeList ()

USE FIELD_MODULE
USE FIELD_FACTORY_MODULE
${fieldType.useParkind1 ()}$

IMPLICIT NONE

PRIVATE

#:for ft in fieldTypeList
TYPE ARRAY_${ft.name}$
  CLASS (${ft.name}$), POINTER :: F_P => NULL ()
  ${ft.type}$, POINTER :: P (${ft.viewShape}$) => NULL()
CONTAINS
  PROCEDURE :: INIT => INIT_ARRAY_${ft.name}$
  PROCEDURE :: FINAL => FINAL_ARRAY_${ft.name}$
  PROCEDURE :: UPDATE_VIEW => UPDATE_VIEW_ARRAY_${ft.name}$
END TYPE

PUBLIC :: ARRAY_${ft.name}$

#:endfor

CONTAINS

#:for ft in fieldTypeList
SUBROUTINE INIT_ARRAY_${ft.name}$ (SELF, P, LBOUNDS)

CLASS (ARRAY_${ft.name}$) :: SELF
${ft.type}$, INTENT (IN), TARGET :: P (${ft.shape}$)
INTEGER (KIND=JPIM), INTENT (IN), OPTIONAL :: LBOUNDS (${ft.rank}$)

CALL WRAP_FIELD (SELF%F_P, P, PERSISTENT=.TRUE., LBOUNDS=LBOUNDS)

END SUBROUTINE

SUBROUTINE UPDATE_VIEW_ARRAY_${ft.name}$ (SELF, BLOCK_INDEX)
CLASS (ARRAY_${ft.name}$) :: SELF
INTEGER (KIND=JPIM), INTENT (IN) :: BLOCK_INDEX

IF (ASSOCIATED (SELF%F_P)) THEN
  SELF%P => SELF%F_P%GET_VIEW (BLOCK_INDEX)
ENDIF

END SUBROUTINE

SUBROUTINE FINAL_ARRAY_${ft.name}$ (SELF)
CLASS (ARRAY_${ft.name}$) :: SELF

IF (ASSOCIATED (SELF%F_P)) THEN
  CALL DELETE_FIELD (SELF%F_P)
  SELF%P => NULL ()
ENDIF

END SUBROUTINE

#:endfor

END MODULE
