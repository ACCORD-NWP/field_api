MODULE FIELD_${RANK}$${SUFF}$_GATHSCAT_MODULE

#:set fieldTypeList = fieldType.getFieldTypeList (ranks=[RANK], kinds=['JP' + SUFF])

USE FIELD_MODULE
USE FIELD_HELPER_MODULE
USE FIELD_FACTORY_MODULE
${fieldType.useParkind1 ()}$

IMPLICIT NONE

PRIVATE

#:for what in ['DEVICE', 'HOST']
#:for mode in ['RDONLY', 'RDWR']

INTERFACE PAIR_GATHER_${what}$_DATA_${mode}$
#:for ft in fieldTypeList
  MODULE PROCEDURE :: PAIR_${ft.name}$_GATHER_${what}$_DATA_${mode}$
#:endfor
END INTERFACE PAIR_GATHER_${what}$_DATA_${mode}$

PUBLIC :: PAIR_GATHER_${what}$_DATA_${mode}$

#:endfor

INTERFACE PAIR_SCATTER_${what}$_DATA
#:for ft in fieldTypeList
  MODULE PROCEDURE :: PAIR_${ft.name}$_SCATTER_${what}$_DATA
#:endfor
END INTERFACE PAIR_SCATTER_${what}$_DATA

PUBLIC :: PAIR_SCATTER_${what}$_DATA

#:endfor

#:for ft in fieldTypeList
TYPE ${ft.name}$_GATHSCAT_PAIR
  INTEGER (KIND=JPIM) :: IMODE = -1
  INTEGER (KIND=JPIM) :: IWHAT = -1
  CLASS (${ft.name}$), POINTER :: YLSCAT => NULL ()
  CLASS (${ft.name}$), POINTER :: YLGATH => NULL ()
  TYPE (${ft.name}$_GATHSCAT_PAIR), POINTER :: NEXT => NULL ()
END TYPE ${ft.name}$_GATHSCAT_PAIR

PUBLIC :: ${ft.name}$_GATHSCAT_PAIR

#:endfor

INTEGER (KIND=JPIM), PARAMETER :: NRDWR = 0, NRDONLY = 1, NHOST = 2, NDEVICE = 3
INTEGER (KIND=JPIM), PARAMETER :: NLONDIM = 1, NBLKDIM = 2

CONTAINS

#:for ft in fieldTypeList

#:for what in ['DEVICE', 'HOST']
#:for mode in ['RDONLY', 'RDWR']

FUNCTION PAIR_${ft.name}$_GATHER_${what}$_DATA_${mode}$ (YDPAIR, LDNULL, LDFULL, KGPBLKS, YDFINDS, YLF) RESULT (PTR)
TYPE (${ft.name}$_GATHSCAT_PAIR), POINTER              :: YDPAIR
LOGICAL,                                   INTENT (IN) :: LDNULL, LDFULL
INTEGER (KIND=JPIM),                       INTENT (IN) :: KGPBLKS
CLASS (FIELD_3IM),                POINTER              :: YDFINDS 
CLASS (${ft.name}$),              POINTER, INTENT (IN) :: YLF

${ft.type}$, POINTER :: PTR(${ft.shape}$), ZTRG(${ft.shape}$), ZTRS(${ft.shape}$)
${ft.type}$, POINTER :: PTR1(${ft.shape}$)
TYPE (${ft.name}$_GATHSCAT_PAIR), POINTER :: YLPAIR
CLASS (${ft.name}$), POINTER :: YLGATH_DUMM
INTEGER (KIND=JPIM) :: ILBOUNDS (${ft.rank}$), IUBOUNDS (${ft.rank}$)
INTEGER (KIND=JPIM), POINTER :: INDS (:,:,:)

IF (LDNULL) THEN

  ! Return dummy pointer
  YLGATH_DUMM => NULL ()
  PTR => GET_${what}$_DATA_${mode}$ (YLGATH_DUMM)

ELSEIF (LDFULL) THEN

  ! Return pointer on packed array
  PTR => GET_${what}$_DATA_${mode}$ (YLF)

ELSE

  PTR => GET_${what}$_DATA_RDONLY (YLF)

  ALLOCATE (YLPAIR)
  YLPAIR%IMODE = N${mode}$
  YLPAIR%IWHAT = N${what}$
  YLPAIR%NEXT => YDPAIR
  YDPAIR => YLPAIR
  YLPAIR%YLSCAT => YLF

  ILBOUNDS = LBOUND (PTR)
  IUBOUNDS = UBOUND (PTR)
  IUBOUNDS (${ft.rank}$) = KGPBLKS
  CALL TEMPORARY_FIELD (YLPAIR%YLGATH, LBOUNDS=ILBOUNDS, UBOUNDS=IUBOUNDS, PERSISTENT=.TRUE.)

  INDS => GET_${what}$_DATA_RDONLY (YDFINDS)
  ZTRS => GET_${what}$_DATA_RDONLY (YLPAIR%YLSCAT)
  ZTRG => GET_${what}$_DATA_RDWR   (YLPAIR%YLGATH)

  CALL GATHER (INDS, ZTRG, ZTRS)

  ! Return pointer on packed array
  PTR => GET_${what}$_DATA_${mode}$ (YLPAIR%YLGATH)

ENDIF


CONTAINS

SUBROUTINE GATHER (KNDS, PTRG, PTRS)

${ft.type}$, INTENT (OUT) :: PTRG(${ft.shape}$)
${ft.type}$, INTENT (IN)  :: PTRS(${ft.shape}$)
INTEGER (KIND=JPIM), INTENT (IN)  :: KNDS (:,:,:)
INTEGER (KIND=JPIM) :: JLONS, JBLKS, JLONG, JBLKG

#:set dc = ', ' + (':, ' * (ft.rank-2))

#:if what == 'DEVICE'
!$acc parallel loop gang present (PTRG, PTRS, KNDS)
#:elif what == 'HOST'
!$OMP PARALLEL DO PRIVATE (JBLKG, JLONG, JBLKS, JLONS)
#:endif
DO JBLKG = 1, SIZE (KNDS, 3)
#:if what == 'DEVICE'
!$acc loop vector private (JLONG, JBLKS, JLONS) 
#:endif
  DO JLONG = 1, SIZE (KNDS, 2)
    JLONS = KNDS (NLONDIM, JLONG, JBLKG)
    JBLKS = KNDS (NBLKDIM, JLONG, JBLKG)
    IF (JLONS > 0) THEN
      PTRG (JLONG${dc}$JBLKG) = PTRS (JLONS${dc}$JBLKS)
    ENDIF
  ENDDO
ENDDO

END SUBROUTINE

END FUNCTION PAIR_${ft.name}$_GATHER_${what}$_DATA_${mode}$

#:endfor
#:endfor
#:endfor

#:for ft in fieldTypeList

#:for what in ['DEVICE', 'HOST']

SUBROUTINE PAIR_${ft.name}$_SCATTER_${what}$_DATA (YDPAIR, YDGATH, YDSCAT, YDFINDS)
TYPE (${ft.name}$_GATHSCAT_PAIR), POINTER              :: YDPAIR
CLASS (${ft.name}$),              POINTER              :: YDGATH, YDSCAT
CLASS (FIELD_3IM),                POINTER              :: YDFINDS 

${ft.type}$, POINTER :: PTRG(${ft.shape}$), PTRS(${ft.shape}$)
INTEGER (KIND=JPIM), POINTER :: INDS (:,:,:)

INDS => GET_${what}$_DATA_RDONLY (YDFINDS)
PTRG => GET_${what}$_DATA_RDONLY (YDGATH)
PTRS => GET_${what}$_DATA_RDWR   (YDSCAT)

CALL SCATTER (INDS, PTRG, PTRS)

CONTAINS

SUBROUTINE SCATTER (KNDS, PTRG, PTRS)

${ft.type}$, INTENT (IN)  :: PTRG(${ft.shape}$)
${ft.type}$, INTENT (OUT) :: PTRS(${ft.shape}$)
INTEGER (KIND=JPIM), INTENT (IN) :: KNDS (:,:,:)
INTEGER (KIND=JPIM) :: JLONS, JBLKS, JLONG, JBLKG

#:set dc = ', ' + (':, ' * (ft.rank-2))

#:if what == 'DEVICE'
!$acc parallel loop gang present (PTRG, PTRS, KNDS)
#:elif what == 'HOST'
!$OMP PARALLEL DO PRIVATE (JBLKG, JLONG, JBLKS, JLONS)
#:endif
DO JBLKG = 1, SIZE (KNDS, 3)
#:if what == 'DEVICE'
!$acc loop vector private (JLONG, JBLKS, JLONS) 
#:endif
  DO JLONG = 1, SIZE (KNDS, 2)
    JLONS = KNDS (NLONDIM, JLONG, JBLKG)
    JBLKS = KNDS (NBLKDIM, JLONG, JBLKG)
    IF (JLONS > 0) THEN
      PTRS (JLONS${dc}$JBLKS) = PTRG (JLONG${dc}$JBLKG) 
    ENDIF
  ENDDO
ENDDO

END SUBROUTINE

END SUBROUTINE PAIR_${ft.name}$_SCATTER_${what}$_DATA

#:endfor
#:endfor

END MODULE FIELD_${RANK}$${SUFF}$_GATHSCAT_MODULE
