MODULE FIELD_GATHSCAT_MODULE

#:set fieldTypeList = fieldType.getFieldTypeList ()

USE FIELD_MODULE
USE FIELD_HELPER_MODULE
USE FIELD_MANAGEMENT_MOD
${fieldType.useParkind1 ()}$

IMPLICIT NONE

PRIVATE

#:for what in ['DEVICE', 'HOST']
#:for mode in ['RDONLY', 'RDWR']

INTERFACE GATHER_${what}$_DATA_${mode}$
#:for ft in fieldTypeList
  MODULE PROCEDURE :: ${ft.name}$_GATHER_${what}$_DATA_${mode}$
#:endfor
END INTERFACE GATHER_${what}$_DATA_${mode}$

PUBLIC :: GATHER_${what}$_DATA_${mode}$

#:endfor

INTERFACE SCATTER_${what}$_DATA
#:for ft in fieldTypeList
  MODULE PROCEDURE :: ${ft.name}$_SCATTER_${what}$_DATA
#:endfor
END INTERFACE SCATTER_${what}$_DATA

PUBLIC :: SCATTER_${what}$_DATA

#:endfor

INTEGER (KIND=JPIM), PARAMETER :: NRDWR = 0, NRDONLY = 1, NHOST = 2, NDEVICE = 3
INTEGER (KIND=JPIM), PARAMETER :: NLONDIM = 1, NBLKDIM = 2

#:for ft in fieldTypeList
TYPE ${ft.name}$_GATHSCAT_PAIR
  INTEGER (KIND=JPIM) :: IMODE = -1
  INTEGER (KIND=JPIM) :: IWHAT = -1
  CLASS (${ft.name}$), POINTER :: YLSCAT => NULL ()
  CLASS (${ft.name}$), POINTER :: YLGATH => NULL ()
  TYPE (${ft.name}$_GATHSCAT_PAIR), POINTER :: NEXT => NULL ()
END TYPE ${ft.name}$_GATHSCAT_PAIR

#:endfor

TYPE FIELD_GATHSCAT
  INTEGER (KIND=JPIM) :: KGPBLKS = -1, KLON = -1, KGPTOT = -1
  LOGICAL :: LFULL = .FALSE.  ! No need to gather/scatter, all columns are OK, return pointers based on original fields
  LOGICAL :: LNULL = .FALSE.  ! No need to gather/scatter, all columns are KO, return pointers on empty arrays
  CLASS (FIELD_2LM), POINTER :: YLFCOND => NULL ()
  CLASS (FIELD_3IM), POINTER :: YLFINDS => NULL ()
#:for ft in fieldTypeList
  TYPE (${ft.name}$_GATHSCAT_PAIR), POINTER :: ${ft.name}$_LIST => NULL ()
#:endfor
CONTAINS
  PROCEDURE :: INIT => INIT_FIELD_GATHSCAT
  PROCEDURE :: SCATTER => SCATTER_FIELD_GATHSCAT
END TYPE FIELD_GATHSCAT

PUBLIC :: FIELD_GATHSCAT

CONTAINS

SUBROUTINE INIT_FIELD_GATHSCAT (SELF, YLFCOND, KGPTOT)
CLASS (FIELD_GATHSCAT) :: SELF
CLASS (FIELD_2LM), POINTER :: YLFCOND
INTEGER (KIND=JPIM), INTENT (IN) :: KGPTOT

LOGICAL, POINTER :: LLF (:,:)
INTEGER (KIND=JPIM), POINTER :: INDS (:,:,:)
INTEGER (KIND=JPIM) :: ICOUNT
INTEGER (KIND=JPIM) :: JLONS, JBLKS, JLONG, JBLKG, I1S, I2S, IPROMA

#include "abor1.intfb.h"

SELF%YLFCOND => YLFCOND

LLF => GET_HOST_DATA_RDONLY (YLFCOND)

IPROMA = SIZE (LLF, 1)

! Reduction

ICOUNT = 0

DO JBLKS = 1, SIZE (LLF, 2)
  I1S = 1
  I2S = MIN (IPROMA, KGPTOT - (JBLKS - 1) * IPROMA)
  ICOUNT = ICOUNT + COUNT (LLF (I1S:I2S,JBLKS))
ENDDO

SELF%KGPBLKS = (ICOUNT+IPROMA-1) / IPROMA
SELF%KLON = IPROMA
SELF%KGPTOT = ICOUNT

SELF%LFULL = SELF%KGPTOT == KGPTOT
SELF%LNULL = SELF%KGPTOT == 0

IF (SELF%LNULL) THEN
  ! Do nothing
ELSEIF (SELF%LFULL) THEN
  ! Do nothing
ELSE

  CALL TEMPORARY_FIELD (SELF%YLFINDS, UBOUNDS=[2, IPROMA, SELF%KGPBLKS], PERSISTENT=.TRUE.)
  INDS => GET_HOST_DATA_RDWR (SELF%YLFINDS)
  
  ! Create indices (serial code)

  JBLKG = 1
  JLONG = 1
  DO JBLKS = 1, SIZE (LLF, 2)
    DO JLONS = 1, MIN (IPROMA, KGPTOT - (JBLKS - 1) * IPROMA)
      IF (LLF (JLONS, JBLKS)) THEN
        IF ((JLONG > SIZE (INDS, 2)) .OR. (JBLKG > SIZE (INDS, 3))) THEN
          CALL ABOR1 ('INIT_FIELD_GATHSCAT: OUT OF BOUNDS')
        ENDIF
        INDS (NLONDIM, JLONG, JBLKG) = JLONS
        INDS (NBLKDIM, JLONG, JBLKG) = JBLKS
        JLONG = JLONG + 1
        IF (JLONG > IPROMA) THEN
          JLONG = 1
          JBLKG = JBLKG + 1
        ENDIF
      ENDIF
    ENDDO
  ENDDO
  
  IF (JBLKG <= SIZE (INDS, 3)) THEN
    DO WHILE (JLONG <= IPROMA)
      INDS (NLONDIM, JLONG, JBLKG) = -9999999
      INDS (NBLKDIM, JLONG, JBLKG) = -9999999
      JLONG = JLONG + 1
    ENDDO
  ENDIF

ENDIF

END SUBROUTINE

SUBROUTINE SCATTER_FIELD_GATHSCAT (SELF)
CLASS (FIELD_GATHSCAT) :: SELF
#:for ft in fieldTypeList
TYPE (${ft.name}$_GATHSCAT_PAIR), POINTER :: ${ft.name}$_LIST, ${ft.name}$_NEXT
#:endfor

IF (SELF%LNULL) THEN
  ! Do nothing
ELSEIF (SELF%LFULL) THEN
  ! Do nothing
ELSE

#:for ft in fieldTypeList


  ${ft.name}$_LIST => SELF%${ft.name}$_LIST
  DO WHILE (ASSOCIATED (${ft.name}$_LIST))

    ! Scatter back results
    IF (${ft.name}$_LIST%IMODE == NRDWR) THEN
      IF (${ft.name}$_LIST%IWHAT == NDEVICE) THEN
        CALL SCATTER_DEVICE_DATA (SELF, ${ft.name}$_LIST%YLGATH, ${ft.name}$_LIST%YLSCAT)
      ELSEIF (${ft.name}$_LIST%IWHAT == NHOST) THEN
        CALL SCATTER_HOST_DATA (SELF, ${ft.name}$_LIST%YLGATH, ${ft.name}$_LIST%YLSCAT)
      ENDIF
    ENDIF

    ${ft.name}$_LIST => ${ft.name}$_LIST%NEXT
  ENDDO

  ${ft.name}$_LIST => SELF%${ft.name}$_LIST
  SELF%${ft.name}$_LIST => NULL ()
  DO WHILE (ASSOCIATED (${ft.name}$_LIST))
    CALL DELETE_FIELD (${ft.name}$_LIST%YLGATH)
    ${ft.name}$_NEXT => ${ft.name}$_LIST%NEXT
    DEALLOCATE (${ft.name}$_LIST)
    ${ft.name}$_LIST => ${ft.name}$_NEXT
  ENDDO

#:endfor


  CALL DELETE_FIELD (SELF%YLFINDS)

ENDIF

SELF%YLFCOND => NULL ()
SELF%YLFINDS => NULL ()
SELF%KGPBLKS = -1
SELF%KLON = -1
SELF%KGPTOT = -1

END SUBROUTINE

#:for ft in fieldTypeList

#:for what in ['DEVICE', 'HOST']
#:for mode in ['RDONLY', 'RDWR']

FUNCTION ${ft.name}$_GATHER_${what}$_DATA_${mode}$ (SELF, YLF) RESULT (PTR)
CLASS(FIELD_GATHSCAT) :: SELF
CLASS (${ft.name}$), POINTER, INTENT (IN) :: YLF
${ft.type}$, POINTER :: PTR(${ft.shape}$), ZTRG(${ft.shape}$), ZTRS(${ft.shape}$)
${ft.type}$, POINTER :: PTR1(${ft.shape}$)
TYPE (${ft.name}$_GATHSCAT_PAIR), POINTER :: YLPAIR
CLASS (${ft.name}$), POINTER :: YLGATH_DUMM
INTEGER (KIND=JPIM) :: ILBOUNDS (${ft.rank}$), IUBOUNDS (${ft.rank}$)
INTEGER (KIND=JPIM), POINTER :: INDS (:,:,:)

IF (SELF%LNULL) THEN

  ! Return dummy pointer
  YLGATH_DUMM => NULL ()
  PTR => GET_${what}$_DATA_${mode}$ (YLGATH_DUMM)

ELSEIF (SELF%LFULL) THEN

  ! Return pointer on packed array
  PTR => GET_${what}$_DATA_${mode}$ (YLF)

ELSE

  PTR => GET_${what}$_DATA_RDONLY (YLF)

  ALLOCATE (YLPAIR)
  YLPAIR%IMODE = N${mode}$
  YLPAIR%IWHAT = N${what}$
  YLPAIR%NEXT => SELF%${ft.name}$_LIST
  SELF%${ft.name}$_LIST => YLPAIR
  YLPAIR%YLSCAT => YLF

  ILBOUNDS = LBOUND (PTR)
  IUBOUNDS = UBOUND (PTR)
  IUBOUNDS (${ft.rank}$) = SELF%KGPBLKS
  CALL TEMPORARY_FIELD (YLPAIR%YLGATH, LBOUNDS=ILBOUNDS, UBOUNDS=IUBOUNDS, PERSISTENT=.TRUE.)

  INDS => GET_${what}$_DATA_RDONLY (SELF%YLFINDS)
  ZTRS => GET_${what}$_DATA_RDONLY (YLPAIR%YLSCAT)
  ZTRG => GET_${what}$_DATA_RDWR   (YLPAIR%YLGATH)

  CALL GATHER (INDS, ZTRG, ZTRS)

  ! Return pointer on packed array
  PTR => GET_${what}$_DATA_${mode}$ (YLPAIR%YLGATH)

ENDIF


CONTAINS

SUBROUTINE GATHER (KNDS, PTRG, PTRS)

${ft.type}$, INTENT (OUT) :: PTRG(${ft.shape}$)
${ft.type}$, INTENT (IN)  :: PTRS(${ft.shape}$)
INTEGER (KIND=JPIM), INTENT (IN)  :: KNDS (:,:,:)
INTEGER (KIND=JPIM) :: JLONS, JBLKS, JLONG, JBLKG

#:set dc = ', ' + (':, ' * (ft.rank-2))

#:if what == 'DEVICE'
!$acc parallel loop gang present (PTRG, PTRS, KNDS)
#:elif what == 'HOST'
!$OMP PARALLEL DO PRIVATE (JBLKG, JLONG, JBLKS, JLONS)
#:endif
DO JBLKG = 1, SIZE (KNDS, 3)
#:if what == 'DEVICE'
!$acc loop vector private (JLONG, JBLKS, JLONS) 
#:endif
  DO JLONG = 1, SIZE (KNDS, 2)
    JLONS = KNDS (NLONDIM, JLONG, JBLKG)
    JBLKS = KNDS (NBLKDIM, JLONG, JBLKG)
    IF (JLONS > 0) THEN
      PTRG (JLONG${dc}$JBLKG) = PTRS (JLONS${dc}$JBLKS)
    ENDIF
  ENDDO
ENDDO

END SUBROUTINE

END FUNCTION ${ft.name}$_GATHER_${what}$_DATA_${mode}$

#:endfor
#:endfor
#:endfor

#:for ft in fieldTypeList

#:for what in ['DEVICE', 'HOST']

SUBROUTINE ${ft.name}$_SCATTER_${what}$_DATA (SELF, YDGATH, YDSCAT)
CLASS(FIELD_GATHSCAT) :: SELF

CLASS (${ft.name}$), POINTER :: YDGATH, YDSCAT
${ft.type}$, POINTER :: PTRG(${ft.shape}$), PTRS(${ft.shape}$)
INTEGER (KIND=JPIM), POINTER :: INDS (:,:,:)

INDS => GET_${what}$_DATA_RDONLY (SELF%YLFINDS)
PTRG => GET_${what}$_DATA_RDONLY (YDGATH)
PTRS => GET_${what}$_DATA_RDWR   (YDSCAT)

CALL SCATTER (INDS, PTRG, PTRS)

CONTAINS

SUBROUTINE SCATTER (KNDS, PTRG, PTRS)

${ft.type}$, INTENT (IN)  :: PTRG(${ft.shape}$)
${ft.type}$, INTENT (OUT) :: PTRS(${ft.shape}$)
INTEGER (KIND=JPIM), INTENT (IN) :: KNDS (:,:,:)
INTEGER (KIND=JPIM) :: JLONS, JBLKS, JLONG, JBLKG

#:set dc = ', ' + (':, ' * (ft.rank-2))

#:if what == 'DEVICE'
!$acc parallel loop gang present (PTRG, PTRS, KNDS)
#:elif what == 'HOST'
!$OMP PARALLEL DO PRIVATE (JBLKG, JLONG, JBLKS, JLONS)
#:endif
DO JBLKG = 1, SIZE (KNDS, 3)
#:if what == 'DEVICE'
!$acc loop vector private (JLONG, JBLKS, JLONS) 
#:endif
  DO JLONG = 1, SIZE (KNDS, 2)
    JLONS = KNDS (NLONDIM, JLONG, JBLKG)
    JBLKS = KNDS (NBLKDIM, JLONG, JBLKG)
    IF (JLONS > 0) THEN
      PTRS (JLONS${dc}$JBLKS) = PTRG (JLONG${dc}$JBLKG) 
    ENDIF
  ENDDO
ENDDO

END SUBROUTINE

END SUBROUTINE ${ft.name}$_SCATTER_${what}$_DATA

#:endfor
#:endfor

END MODULE FIELD_GATHSCAT_MODULE
